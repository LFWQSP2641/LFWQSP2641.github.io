[{"title":"在 NanoPi R3S 上配置 sing-box 的 TUN 模式","path":"/post/openwrt-sing-box-tun/","content":"接上一篇从零开始 NanoPi R3S，本文将介绍如何在 NanoPi R3S 上配置 sing-box 的 TUN 模式。 配置 sing-box 选择 sing-box 版本: 推荐使用风佬的 sing-box 分支，该分支提供了一些实用功能，例如 provider 和 remote rule-set path。 编译与安装: 将 sing-box 编译为适用于 aarch64_cortex-a53 架构的二进制文件。 参考官方 GitHub Workflow 流程将二进制文件打包成 ipk 包。 将 ipk 包安装到 NanoPi R3S。 模式选择: 本文采用 TUN 模式进行配置，TProxy 模式理论上也可行。 DNS 配置: 为避免冲突和二次缓存，建议禁用 dnsmasq 的 DNS 功能。具体操作是将 dnsmasq 的监听端口改为 0。 与 smartdns 配合为了获得更优的 DNS 解析体验，可以配合 smartdns 使用。 安装 smartdns: 访问 smartdns Releases 页面下载适用于 aarch64_cortex-a53 架构的 ipk 包。例如 smartdns.1.*.aarch64-openwrt-all.ipk 和 luci-app-smartdns.1.*.all-luci-all.ipk opkg 安装下载的 ipk 包。 配置 smartdns: 由于 smartdns 的 LuCI 界面在多端口配置方面不够便捷，建议采用自定义配置的方式。之后，可以在 sing-box 中将 DNS 请求分流到 smartdns 的不同端口。 在 smartdns LuCI 界面的 自定义设置 中填入以下内容： smartdns.conf speed-check-mode tcp:443,tcp:80log-level warnlog-file /tmp/smartdns/smartdns.loglog-syslog yescache-checkpoint-time 3600bind [::]:5335 -group proxy_group -no-speed-checkbind [::]:5336 -group direct_groupserver-https https://dns.google/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-https https://cloudflare-dns.com/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-https https://doh.dns.sb/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-https https://doh.opendns.com/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-https https://common.dot.dns.yandex.net/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-https https://1.1.1.1/dns-query -group proxy_group -exclude-default-group -proxy global_proxyserver-tls 1.1.1.1 -group proxy_group -exclude-default-group -proxy global_proxyserver-tls 1.0.0.1 -group proxy_group -exclude-default-group -proxy global_proxyserver-tls 8.8.8.8 -group proxy_group -exclude-default-group -proxy global_proxyserver-tls 8.8.4.4 -group proxy_group -exclude-default-group -proxy global_proxyserver 1.1.1.1 -group proxy_group -exclude-default-group -proxy global_proxy -fallbackserver 1.0.0.1 -group proxy_group -exclude-default-group -proxy global_proxy -fallbackserver 8.8.8.8 -group proxy_group -exclude-default-group -proxy global_proxy -fallbackserver 8.8.4.4 -group proxy_group -exclude-default-group -proxy global_proxy -fallbackserver 202.115.39.9 -group direct_group -exclude-default-group -proxy direct_proxyserver 202.115.39.6 -group direct_group -exclude-default-group -proxy direct_proxyserver-https https://dns.alidns.com/dns-query -group direct_group -exclude-default-group -proxy direct_proxyserver-https https://doh.pub/dns-query -group direct_group -exclude-default-group -proxy direct_proxyserver 119.29.29.29 -group direct_group -exclude-default-group -proxy direct_proxyserver 119.28.28.28 -group direct_group -exclude-default-group -proxy direct_proxyserver 223.5.5.5 -group direct_group -exclude-default-group -proxy direct_proxyserver 223.6.6.6 -group direct_group -exclude-default-group -proxy direct_proxyproxy-server socks5://127.0.0.1:20809 -name global_proxyproxy-server socks5://127.0.0.1:20811 -name direct_proxy 注意: 请将上述配置中的 202.115.39.9 和 202.115.39.6 替换为您所在地区的 DNS 服务器 IP 地址。 调整 smartdns 设置: 取消勾选 smartdns LuCI 界面中的 自动设置 Dnsmasq 功能。 在 smartdns LuCI 界面的 本地端口 设置为 53。 添加上游服务器，指向 sing-box 的 DNS 端口 5340，以利用 sing-box 提供的分流功能。 指定 DHCP DNS 服务器: 在 iStoreOS 的 LuCI 界面中，导航至 网络 - 接口 - LAN，在 DHCP 服务器 - 高级设置 中，将 DHCP 选项 设置为 6,192.168.100.1，以确保局域网内的设备使用路由器作为 DNS 服务器。 注意： sing-box 的 tun 会自动劫持下游设备的 DNS 请求，所以 fake-ip 自动生效，不会与其他 DNS 服务器冲突。 smartdns 指向 sing-box 的 DNS 端口 5340，而不是提供 fake-ip 的端口 5339，是因为避免软路由器本身的 DNS 请求被 fake-ip 劫持，导致无法解析某些域名。 将 DHCP 选项 设置为 6,192.168.100.1，是为了保证下属设备的虚拟机使用了 Nat 模式依然可以正常使用，否则虚拟机可能会报错未找到 DNS 服务器。 可以尝试禁用 sing-box 的 dns 缓存功能，避免二次缓存，副作用未知。 以下是 sing-box 的配置示例： sing-box_openwrt_tun log: level: error, timestamp: true , dns: servers: [ tag: dns-remote, type: udp, server: 127.0.0.1, server_port: 5335 , tag: dns-local, type: udp, server: 127.0.0.1, server_port: 5336 , tag: dns-fake, type: fakeip, inet4_range: 198.18.0.0/15, inet6_range: fc00::/18 ], rules: [ clash_mode: Direct, server: dns-local , clash_mode: Global, server: dns-remote , query_type: [ 64, 65 ], action: predefined, rcode: NXDOMAIN , domain: [ basic-static-server.infinitynewtab.com ], action: predefined, rcode: NOTIMP , type: logical, mode: and, rules: [ clash_mode: AllowAds, invert: true , rule_set: geosite-category-ads-all ], action: predefined, rcode: NXDOMAIN , type: logical, mode: and, rules: [ query_type: [ A, AAAA ] , inbound: [ dns-real-in ], invert: true , rule_set: [ geosite-fake-filter ], domain_suffix: [ xiaomi.com ], invert: true ], action: route, server: dns-fake, rewrite_ttl: 1 , domain_suffix: [ bing.com, googleapis.cn, gstatic.com ], server: dns-remote , domain_suffix: [ senhewenhua.com, cnmdm.top, akamaized.net, moedot.net, cycani.org, xifanacg.com, skland.com, aliyun.com, online-fix.me ], rule_set: [ geosite-cn ], server: dns-local ], final: dns-remote, disable_cache: true , inbounds: [ type: mixed, tag: mixed-in, listen: 127.0.0.1, listen_port: 20808 , type: mixed, tag: mixed-in2, listen: ::, listen_port: 20809 , type: mixed, tag: mixed-in3, listen: ::, listen_port: 20810 , type: mixed, tag: mixed-in4, listen: ::, listen_port: 20811 , type: mixed, tag: mixed-in5, listen: ::, listen_port: 20828 , type: direct, tag: dns-in, listen: ::, listen_port: 5339, override_address: 1.1.1.1, override_port: 53 , type: direct, tag: dns-real-in, listen: ::, listen_port: 5340, override_address: 1.1.1.1, override_port: 53 , type: tun, tag: tun-in, interface_name: singbox_tun, address: [ 172.64.0.1/30, fd6a:7446:b1cd::1/126 ], mtu: 65535, auto_route: true, auto_redirect: true, strict_route: true, stack: mixed, platform: http_proxy: enabled: true, server: 127.0.0.1, server_port: 20808 ], outbounds: [ ], route: default_domain_resolver: server: dns-local, strategy: prefer_ipv6 , rules: [ inbound: [ mixed-in2 ], outbound: bypass-edu-net, clash_mode: BypassEduNet , outbound: bypass-edu-net, inbound: [ mixed-in4 ], clash_mode: BypassEduNet , inbound: [ mixed-in2 ], outbound: proxy , inbound: [ mixed-in4 ], outbound: direct , inbound: [ mixed-in5 ], outbound: bypass-edu-net , inbound: [ dns-in, dns-real-in ], action: hijack-dns , source_ip_is_private: false, network: [ udp ], port: [ 135, 137, 138, 139, 5353 ], action: reject , source_ip_is_private: false, ip_cidr: [ 224.0.0.0/3, ff00::/8 ], action: reject , type: logical, mode: and, rules: [ rule_set: [ geosite-cn, geoip-cn ], invert: true , network: udp, port: 443 ], action: reject, method: default , source_ip_cidr: [ 224.0.0.0/3, ff00::/8 ], ip_cidr: [ 224.0.0.0/3, ff00::/8 ], action: reject, method: default , type: logical, mode: and, rules: [ clash_mode: AllowAds, invert: true , rule_set: geosite-category-ads-all ], action: reject, method: default , port: [ 53 ], process_name: [ v2ray, v2ray, xray, mihomo-windows-amd64-compatible, mihomo-windows-amd64, mihomo-linux-amd64, clash, mihomo, hysteria, naive, naiveproxy, tuic-client, tuic, juicity-client, juicity, hysteria-windows-amd64, hysteria-linux-amd64, hysteria, brook_windows_amd64, brook_linux_amd64, brook, overtls-bin, overtls ], action: sniff, sniffer: [ dns ] , protocol: dns, action: hijack-dns , outbound: direct, process_name: [ v2ray, v2ray, xray, mihomo-windows-amd64-compatible, mihomo-windows-amd64, mihomo-linux-amd64, clash, mihomo, hysteria, naive, naiveproxy, tuic-client, tuic, sing-box-client, sing-box, juicity-client, juicity, hysteria-windows-amd64, hysteria-linux-amd64, hysteria, brook_windows_amd64, brook_linux_amd64, brook, overtls-bin, overtls, utorrent, qbittorrent, smartdns ] , outbound: bypass-edu-net, clash_mode: BypassEduNet , rule_set: geoip-telegram, clash_mode: Direct, outbound: direct , rule_set: geoip-telegram, outbound: proxy , port: 53, action: sniff, sniffer: [ dns ] , action: sniff, sniffer: [ http, tls, bittorrent ], timeout: 500ms , protocol: dns, action: hijack-dns , type: logical, mode: or, rules: [ protocol: bittorrent ], outbound: direct , ip_is_private: true, outbound: direct , rule_set: geosite-private, outbound: direct , outbound: proxy, clash_mode: Global , outbound: direct, clash_mode: Direct , type: logical, mode: and, rules: [ rule_set: [ geosite-cn, geoip-cn ], invert: true , network: udp, port: 443 ], action: reject, method: default , source_ip_cidr: [ 224.0.0.0/3, ff00::/8 ], ip_cidr: [ 224.0.0.0/3, ff00::/8 ], action: reject, method: default , type: logical, mode: and, rules: [ clash_mode: AllowAds, invert: true , rule_set: geosite-category-ads-all ], action: reject, method: default , domain_suffix: [ bing.com, googleapis.cn, gstatic.com ], outbound: proxy , clash_mode: GameDirect, rule_set: [ geosite-category-games ], outbound: direct , domain_suffix: [ cycani.org, senhewenhua.com, cnmdm.top, akamaized.net, moedot.net, xifanacg.com, skland.com, aliyun.com, online-fix.me ], rule_set: geosite-cn, outbound: direct , rule_set: geosite-geolocation-!cn, outbound: proxy , action: resolve, server: dns-remote , type: logical, mode: or, rules: [ rule_set: geoip-cn , ip_is_private: true ], invert: true, outbound: proxy , action: resolve, server: dns-local, strategy: prefer_ipv6 ], rule_set: [ type: remote, tag: geosite-category-games, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geosite/geosite-category-games.srs, path: /etc/sing-box/srss/geosite-category-games.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geosite-category-ads-all, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geosite/geosite-category-ads-all.srs, path: /etc/sing-box/srss/geosite-category-ads-all.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geosite-private, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geosite/geosite-private.srs, path: /etc/sing-box/srss/geosite-private.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geosite-cn, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geosite/geosite-cn.srs, path: /etc/sing-box/srss/geosite-cn.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geoip-cn, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geoip/geoip-cn.srs, path: /etc/sing-box/srss/geoip-cn.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geoip-telegram, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geoip/geoip-telegram.srs, path: /etc/sing-box/srss/geoip-telegram.srs, download_detour: proxy-init, update_interval: 72h0m0s , type: remote, tag: geosite-geolocation-!cn, format: binary, url: https://raw.githubusercontent.com/lyc8503/sing-box-rules/rule-set-geosite/geosite-geolocation-!cn.srs, path: /etc/sing-box/srss/geosite-geolocation-!cn.srs, download_detour: proxy, update_interval: 72h0m0s , type: remote, tag: geosite-fake-filter, format: binary, url: https://raw.githubusercontent.com/DustinWin/ruleset_geodata/sing-box-ruleset/fakeip-filter.srs, path: /etc/sing-box/srss/geosite-fake-filter.srs, download_detour: proxy, update_interval: 72h0m0s ], final: direct, auto_detect_interface: true , experimental: cache_file: enabled: true, path: /etc/sing-box/cache.db, store_fakeip: true , clash_api: external_controller: 0.0.0.0:9090, external_ui: /etc/sing-box/ui, external_ui_download_url: https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip, external_ui_download_detour: proxy-init , providers: [ ] 注意： sing-box 的 TUN 可能导致校园网认证环境下 IPv6 无法使用，以及在 IPv6 Relay 模式下下属设备无法访问 IPv6 网站，需要关闭 sing-box 后，重新认证再重启 sing-box。","tags":["校园网","NanoPi R3S","R3S","iStoreOS","OpenWrt","路由器","配置","锐捷","四川大学","江安校区","sing-box","TUN 模式","smartdns","DNS"]},{"title":"从零开始 NanoPi R3S","path":"/post/introduction-to-nano-pi-r3s/","content":"近几天购置了一台 NanoPi R3S 作为主路由使用，本文将记录从零开始配置的过程。 购买在 pdd 上购买了 NanoPi R3S（2G + 32G），价格约 300 元，包含了电源适配器和 USB WiFi 网卡（COMFAST CF-811AC V3）。 开始配置时才发现大部分固件对这款 USB WiFi 网卡的支持并不好，显示无线未关联，只有 iStoreOS 和 21 版本及之前的 OpenWrt 支持较好，所以建议自己购买一个支持较好的 USB WiFi 网卡。 硬件 NanoPi R3S（2G + 32G） 电源适配器（建议原装的5V 3A，但是实测5V 2.1A的充电宝也能带动） TF 卡（用来刷入 iStoreOS 系统，如使用线刷则不需要） 刷机因为上面提到的 USB WiFi 网卡支持较好的系统版本较少，所以示例这边刷入 iStoreOS 系统，目前找到的问题是 WAN 网口只闪绿灯，LAN 网口只闪红灯，不影响正常使用。 R3S iStoreOS 固件：下载地址 可以先检查初始系统 FriendlyWrt 页面是否有eMMC刷机助手功能，如果有则可以直接使用该功能刷入 iStoreOS 系统。 如果没有该功能，则需要先刷入最新版 FriendlyWrt 系统，然后再使用该功能刷入 iStoreOS。 参考 iStoreOS 官方文档。 启动后进入 FriendlyWrt 的 Web 界面，点击上方菜单的系统 - eMMC刷机助手，然后选择 iStoreOS 的固件文件，点击开始刷机。 刷机完成后，SYS灯 (红灯) 慢闪，LAN灯 (绿灯) 常亮，WAN灯 (绿灯) 常亮，表示刷机成功，需弹出 TF 卡或拔插电源以重启。 配置 USB WiFi 网卡经测试，friendlywrt 似乎对 COMFAST CF-811AC V3 的支持较差，无法正常工作，显示无线未关联。将 etc/modules.d/11-rtl8821cu 文件中的 rtl8821cu 修改为 rtw_8821cu 后，虽然日志和界面都显示正常，但是无法搜索到其无线信号。 所以这边使用 iStoreOS 系统来配置 USB WiFi 网卡。 参考 another device with 0bda:1a2b not switching to c811，需要添加内核启动参数：usb-storage.quirks=0bda:1a2b:i。 将新的 boot.scr 文件替换掉原 /boot/boot.scr 文件，可参考我的 github 仓库：istoreos-boot.scr。 重启后，USB WiFi 网卡应该就可以正常工作了。 修复江安西舍的 IPV6 问题四川大学江安校区的锐捷校园网下发 64 IPv6，所以可以配置 NAT66 或 IPV6 relay。 因为未分配 IPv6 前缀，所以会导致下游设备可能出现问题。比如路由器无法获取分配 IPv6 前缀，导致无法正常工作，需要改为 AP 模式。以及虚拟机的网络无法正常工作，包括桥接模式和 NAT 模式。但是正常上网和访问 IPv6 网站没有问题。所以我这边选择配置 NAT66。 配置 NAT66可以直接使用 iStore 的 系统便利工具 软件，安装后在左侧菜单中找到 系统 - 系统便利工具，然后点击 IPV6 NAT 3 执行。 如果想手动配置，可以参考以下步骤： 编辑 /etc/config/firewall 文件，添加以下内容： config zone option name wan ... option masq6 1 LAN：把 RA、DHCPv6、NDP 从 relay 改为 server（或 hybrid）。 修改 IPv6 ULA 前缀，将最开头的 fd 改为 dd 即可，然后重启网络。 配置 IPV6 Relay 编辑 /etc/config/firewall 文件，添加以下内容： config zone option name wan ... option masq6 0 WAN6：RA、DHCPv6、NDP 都要设为 relay，并勾选 master。 LAN：RA、DHCPv6、NDP 也要设为 relay。 DAD 问题似乎校园网配置有问题，Duplicate address Detection 总是警告与一台 MAC 地址为 34:7e:00:c6:d6:b5 的华为设备重复 所以需要在 sysctl.conf 中添加以下配置来关闭 DAD，并更改设备的 MAC： /etc/sysctl.conf 文件中添加以下内容： net.ipv6.conf.eth0.dad_transmits = 1net.ipv6.conf.eth0.accept_dad = 1 /etc/config/network 文件中修改以下内容： config device option name eth0 option macaddr xx:xx:xx:xx:xx:xx # 修改为你想要的 MAC 地址 重启后，IPv6 应该就可以正常工作了。","tags":["IPv6","校园网","NanoPi R3S","R3S","iStoreOS","OpenWrt","路由器","刷机","配置","锐捷","USB WiFi 网卡","网络配置","四川大学","江安校区"]},{"title":"Xray-core 客户端配置","path":"/post/xray-client-config/","content":"声明： 仅供研究和测试，请勿将其用于任何收费或违法活动，后果自负。 仅供自用，不一定适合其他人。 特点 适用于自建节点 多节点最低延迟最稳定 白名单模式（绕过大陆） 非 tun 及 fakeip 配置配置结构 log: , dns: , inbounds: [], outbounds: [], routing: , observatory: , policy: , metrics: , stats: loglog loglevel: warning dnsdns hosts: , servers: [], tag: dns-module dns_hostdns_host geosite:category-ads-all: #3, domain:googleapis.cn: googleapis.com, dns.alidns.com: [ 223.5.5.5, 223.6.6.6, 2400:3200::1, 2400:3200:baba::1 ], one.one.one.one: [ 1.1.1.1, 1.0.0.1, 2606:4700:4700::1111, 2606:4700:4700::1001 ], dot.pub: [ 1.12.12.12, 120.53.53.53 ], dns.google: [ 8.8.8.8, 8.8.4.4, 2001:4860:4860::8888, 2001:4860:4860::8844 ], dns.quad9.net: [ 9.9.9.9, 149.112.112.112, 2620:fe::fe, 2620:fe::9 ], dns.yandex.net: [ 77.88.8.8, 77.88.8.1, 2a02:6b8::feed:0ff, 2a02:6b8:0:1::feed:0ff ], dns.sb: [ 185.222.222.222, 2a09:: ], dns.umbrella.com: [ 208.67.220.220, 208.67.222.222, 2620:119:35::35, 2620:119:53::53 ], dns.sse.cisco.com: [ 208.67.220.220, 208.67.222.222, 2620:119:35::35, 2620:119:53::53 ] dns_servers阿里dns本地dnsdns_servers [ address: https://dns.google/dns-query, domains: [ domain:bing.com ] , address: https://dns.alidns.com/dns-query, skipFallback: true, domains: [ domain:online-fix.me, geosite:category-games@cn ], tag: direct-dns-module-1 , address: https://dns.alidns.com/dns-query, skipFallback: true, domains: [ geosite:cn, ], expectIPs: [ geoip:cn ], tag: direct-dns-module-2 , https://cloudflare-dns.com/dns-query, https://dns.sb/dns-query, https://dns.sse.cisco.com/dns-query]dns_servers [ address: https://dns.google/dns-query, domains: [ domain:bing.com ] , address: localhost, skipFallback: true, domains: [ domain:online-fix.me, geosite:category-games@cn ], tag: direct-dns-module-1 , address: localhost, skipFallback: true, domains: [ geosite:cn, ], expectIPs: [ geoip:cn ], tag: direct-dns-module-2 , https://cloudflare-dns.com/dns-query, https://dns.sb/dns-query, https://dns.sse.cisco.com/dns-query] 注： online-fix.me 为额外需要直连的域名，可删除或添加其他域名。 inboundsinbounds [ tag: socks, port: 10808, listen: 127.0.0.1, protocol: socks, sniffing: enabled: true, destOverride: [ http, tls ], routeOnly: false , settings: auth: noauth, udp: true, allowTransparent: false , tag: socks3, port: 10810, listen: 0.0.0.0, protocol: socks, sniffing: enabled: true, destOverride: [ http, tls ], routeOnly: false , settings: auth: noauth, udp: true, allowTransparent: false , tag: api, port: 10812, listen: 127.0.0.1, protocol: dokodemo-door, settings: address: 127.0.0.1 ] 不需要局域网开放和 api ，可以只保留第一项： inbounds [ tag: socks, port: 10808, listen: 127.0.0.1, protocol: socks, sniffing: enabled: true, destOverride: [ http, tls ], routeOnly: false , settings: auth: noauth, udp: true, allowTransparent: false ] outboundsoutbounds [ tag: proxy-1, protocol: vless // ... , tag: proxy-2, protocol: vless // ... , tag: direct, protocol: freedom , tag: block, protocol: blackhole ] 可以根据需要添加更多的代理节点，只需确保 tag 开头为 proxy（或其他值）。 不需要多节点可以只添加一个代理出站，tag 为 proxy： routingrouting结构 domainStrategy: IPIfNonMatch, rules: [], balancers: [] domainStrategy 可以选择 AsIs IPIfNonMatch IPOnDemand，具体差异可以查看文档：路由 不需要多节点将 balancers 项删除，rules 中的 balancerTag: proxy-round 替换为 outboundTag: proxy routing_rulesrouting_rules [ type: field, inboundTag: [ api ], outboundTag: api , type: field, outboundTag: direct, domain: [ domain:online-fix.me, geosite:category-games@cn ] , type: field, balancerTag: proxy-round, domain: [ domain:bing.com ] , type: field, balancerTag: proxy-round, domain: [ domain:googleapis.cn, domain:gstatic.com ] , type: field, port: 443, network: udp, outboundTag: block , type: field, balancerTag: proxy-round, domain: [ domain:cloudflare-dns.com, domain:1dot1dot1dot1.cloudflare-dns.com, domain:dns.google, domain:dns.quad9.net, domain:dns.sb, domain:dns.umbrella.com, domain:dns.sse.cisco.com, domain:dns.yandex.net ] , type: field, outboundTag: block, domain: [ geosite:category-ads-all ] , type: field, outboundTag: direct, ip: [ geoip:private ] , type: field, outboundTag: direct, domain: [ geosite:private ] , type: field, outboundTag: direct, ip: [ 223.5.5.5, 223.6.6.6, 2400:3200::1, 2400:3200:baba::1, 119.29.29.29, 1.12.12.12, 120.53.53.53, 2402:4e00::, 2402:4e00:1::, 180.76.76.76, 2400:da00::6666, 114.114.114.114, 114.114.115.115, 114.114.114.119, 114.114.115.119, 114.114.114.110, 114.114.115.110, 180.184.1.1, 180.184.2.2, 101.226.4.6, 218.30.118.6, 123.125.81.6, 140.207.198.6, 1.2.4.8, 210.2.4.8, 52.80.66.66, 117.50.22.22, 2400:7fc0:849e:200::4, 2404:c2c0:85d8:901::4, 117.50.10.10, 52.80.52.52, 2400:7fc0:849e:200::8, 2404:c2c0:85d8:901::8, 117.50.60.30, 52.80.60.30 ] , type: field, outboundTag: direct, domain: [ domain:alidns.com, domain:doh.pub, domain:dot.pub, domain:360.cn, domain:onedns.net ] , type: field, outboundTag: direct, ip: [ geoip:cn ] , type: field, outboundTag: direct, domain: [ geosite:cn ] , type: field, inboundTag: [ direct-dns-module-1, direct-dns-module-2 ], outboundTag: direct , type: field, inboundTag: [ dns-module ], outboundTag: proxy-round , type: field, ip: [ 0.0.0.0/0, ::/0 ], balancerTag: proxy-round ] 不需要 api 功能将第一项删除 domainStrategy 不使用 IPIfNonMatch ，需要将最后一项 ip 规则换为： routing_rules_object type: field, network: tcp,udp, balancerTag: proxy-round routing_balancersrouting_balancers [ selector: [ proxy ], strategy: type: leastLoad , tag: proxy-round ] 可根据具体需要更换 leastLoad 为其他值 burstObservatory连接观测，当 routing.balancers[].strategy.type 设置为 leastLoad 或 leastPing ，需要配置。 burstObservatory subjectSelector: [ proxy ], pingConfig: destination: https://www.google.com/generate_204, interval: 5m, sampling: 2, timeout: 30s destination 和 interval 可根据需要更改。 api相关不需要可以直接跳过 policypolicy system: statsOutboundUplink: true, statsOutboundDownlink: true metricspolicy tag: api stats不需要任何参数，只要 StatsObject 项存在，内部的统计即、就会开启。 policy 完整配置config.json log: loglevel: warning , dns: hosts: geosite:category-ads-all: 127.0.0.1, domain:googleapis.cn: googleapis.com, dns.alidns.com: [ 223.5.5.5, 223.6.6.6, 2400:3200::1, 2400:3200:baba::1 ], one.one.one.one: [ 1.1.1.1, 1.0.0.1, 2606:4700:4700::1111, 2606:4700:4700::1001 ], dot.pub: [ 1.12.12.12, 120.53.53.53 ], dns.google: [ 8.8.8.8, 8.8.4.4, 2001:4860:4860::8888, 2001:4860:4860::8844 ], dns.quad9.net: [ 9.9.9.9, 149.112.112.112, 2620:fe::fe, 2620:fe::9 ], dns.yandex.net: [ 77.88.8.8, 77.88.8.1, 2a02:6b8::feed:0ff, 2a02:6b8:0:1::feed:0ff ], dns.sb: [ 185.222.222.222, 2a09:: ], dns.umbrella.com: [ 208.67.220.220, 208.67.222.222, 2620:119:35::35, 2620:119:53::53 ], dns.sse.cisco.com: [ 208.67.220.220, 208.67.222.222, 2620:119:35::35, 2620:119:53::53 ] , servers: [ address: https://dns.google/dns-query, domains: [ domain:bing.com ] , address: localhost, skipFallback: true, domains: [ domain:online-fix.me, geosite:category-games@cn ], tag: direct-dns-module-1 , address: localhost, skipFallback: true, domains: [ geosite:cn, ], expectIPs: [ geoip:cn ], tag: direct-dns-module-2 , https://cloudflare-dns.com/dns-query, https://dns.sb/dns-query, https://dns.sse.cisco.com/dns-query ] , inbounds: [ tag: socks, port: 10808, listen: 127.0.0.1, protocol: socks, sniffing: enabled: true, destOverride: [ http, tls ], routeOnly: false , settings: auth: noauth, udp: true, allowTransparent: false , tag: socks3, port: 10810, listen: 0.0.0.0, protocol: socks, sniffing: enabled: true, destOverride: [ http, tls ], routeOnly: false , settings: auth: noauth, udp: true, allowTransparent: false , tag: api, port: 10812, listen: 127.0.0.1, protocol: dokodemo-door, settings: address: 127.0.0.1 ], outbounds: [ tag: proxy-1, protocol: vless // ... , tag: proxy-2, protocol: vless // ... , tag: direct, protocol: freedom , tag: block, protocol: blackhole ], routing: domainStrategy: IPIfNonMatch, rules: [ type: field, inboundTag: [ api ], outboundTag: api , type: field, outboundTag: direct, domain: [ domain:online-fix.me, geosite:category-games@cn ] , type: field, balancerTag: proxy-round, domain: [ domain:bing.com ] , type: field, balancerTag: proxy-round, domain: [ domain:googleapis.cn, domain:gstatic.com ] , type: field, balancerTag: proxy-round, domain: [ domain:cloudflare-dns.com, domain:1dot1dot1dot1.cloudflare-dns.com, domain:dns.google, domain:dns.quad9.net, domain:dns.sb, domain:dns.umbrella.com, domain:dns.sse.cisco.com, domain:dns.yandex.net ] , type: field, port: 443, network: udp, outboundTag: block , type: field, outboundTag: block, domain: [ geosite:category-ads-all ] , type: field, outboundTag: direct, ip: [ geoip:private ] , type: field, outboundTag: direct, domain: [ geosite:private ] , type: field, outboundTag: direct, ip: [ 223.5.5.5, 223.6.6.6, 2400:3200::1, 2400:3200:baba::1, 119.29.29.29, 1.12.12.12, 120.53.53.53, 2402:4e00::, 2402:4e00:1::, 180.76.76.76, 2400:da00::6666, 114.114.114.114, 114.114.115.115, 114.114.114.119, 114.114.115.119, 114.114.114.110, 114.114.115.110, 180.184.1.1, 180.184.2.2, 101.226.4.6, 218.30.118.6, 123.125.81.6, 140.207.198.6, 1.2.4.8, 210.2.4.8, 52.80.66.66, 117.50.22.22, 2400:7fc0:849e:200::4, 2404:c2c0:85d8:901::4, 117.50.10.10, 52.80.52.52, 2400:7fc0:849e:200::8, 2404:c2c0:85d8:901::8, 117.50.60.30, 52.80.60.30 ] , type: field, outboundTag: direct, domain: [ domain:alidns.com, domain:doh.pub, domain:dot.pub, domain:360.cn, domain:onedns.net ] , type: field, outboundTag: direct, ip: [ geoip:cn ] , type: field, outboundTag: direct, domain: [ geosite:cn ] , type: field, inboundTag: [ direct-dns-module-1, direct-dns-module-2 ], outboundTag: direct , type: field, inboundTag: [ dns-module ], outboundTag: proxy-round , type: field, ip: [ 0.0.0.0/0, ::/0 ], balancerTag: proxy-round ], balancers: [ selector: [ proxy ], strategy: type: leastLoad , tag: proxy-round ] , burstObservatory: subjectSelector: [ proxy ], pingConfig: destination: https://www.google.com/generate_204, interval: 5m, sampling: 2, timeout: 30s , policy: system: statsOutboundUplink: true, statsOutboundDownlink: true , metrics: tag: api , stats:","tags":["配置","xray","xray-core","客户端"]},{"title":"Ubuntu 24 配置限制端口访问国家","path":"/post/iptables-ipset-country-filtering-for-ports-ubuntu-24/","content":"本文介绍如何在 Ubuntu 24 系统上配置 iptables 和 ipset，实现按国家限制特定端口的访问，主要用于保护服务器关键端口（如 SSH、RCON）免受国外 IP 扫描和攻击。 Ubuntu 24 配置限制端口按国家访问在搭建完 Minecraft 服务器后，我发现 RCON 端口频繁遭受国外 IP 的扫描攻击，SSH 端口也可能面临类似问题。本文介绍如何针对特定端口设置国家访问限制。 获取 IP 地址列表由于大多数攻击来自国外，我们将使用中国 IP 地址作为白名单。 下载 IP 地址列表我们使用 Loyalsoldiergeoip 项目的数据，该项目对 MaxMind 官方 GeoIP 数据进行了优化： 中国大陆 IPv4 数据融合了 IPIP.net 和 @gaoyifanchina-operator-ip 中国大陆 IPv6 数据融合了 MaxMind GeoLite2 和 @gaoyifanchina-operator-ip 需要下载的文件： textcn.txt textprivate.txt mkdir -p /etc/firewall_persist/geoipwget -O /etc/firewall_persist/geoip/cn.txt https://github.com/Loyalsoldier/geoip/raw/release/text/cn.txtwget -O /etc/firewall_persist/geoip/private.txt https://github.com/Loyalsoldier/geoip/raw/release/text/private.txt 分离 IPv4 和 IPv6 地址创建脚本 /usr/local/bin/split_ipv4_ipv6： #!/bin/bash# 日志文件路径log_file=/var/log/split_ipv4_ipv6.log# 检查是否提供了输入文件if [ -z $1 ]; then echo $(date): Error: No input file provided. $log_file exit 1fiinput_file=$1base_name=$(basename $input_file .txt)ipv4_file=$base_name_ipv4.txtipv6_file=$base_name_ipv6.txt# 清空输出文件 $ipv4_file $ipv6_file# 逐行读取输入文件while read -r line; do if [[ $line =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+(/[0-9]+)?$ ]]; then echo $line $ipv4_file elif [[ $line =~ ^[0-9a-fA-F:]+(/[0-9]+)?$ ]]; then echo $line $ipv6_file else echo $(date): Invalid line: $line $log_file fidone $input_fileecho $(date): IPv4 addresses saved to $ipv4_file $log_fileecho $(date): IPv6 addresses saved to $ipv6_file $log_file 设置执行权限并运行： chmod +x /usr/local/bin/split_ipv4_ipv6cd /etc/firewall_persist/geoipsplit_ipv4_ipv6 /etc/firewall_persist/geoip/cn.txtsplit_ipv4_ipv6 /etc/firewall_persist/geoip/private.txt 配置 ipset安装 ipset： apt install ipset 创建 IP 地址集合： # 创建 IPv4 集合ipset create cn_ip_v4 hash:net family inetipset create private_ip_v4 hash:net family inet# 创建 IPv6 集合ipset create cn_ip_v6 hash:net family inet6ipset create private_ip_v6 hash:net family inet6 将 IP 地址添加到集合： while read -r cidr; do ipset add cn_ip_v4 $cidrdone /etc/firewall_persist/geoip/cn_ipv4.txtwhile read -r cidr; do ipset add private_ip_v4 $cidrdone /etc/firewall_persist/geoip/private_ipv4.txtwhile read -r cidr; do ipset add cn_ip_v6 $cidrdone /etc/firewall_persist/geoip/cn_ipv6.txtwhile read -r cidr; do ipset add private_ip_v6 $cidrdone /etc/firewall_persist/geoip/private_ipv6.txt 创建防火墙规则以 SSH 端口（22）为例： iptables -A INPUT -p tcp --dport 22 -m set --match-set private_ip_v4 src -j ACCEPTip6tables -A INPUT -p tcp --dport 22 -m set --match-set private_ip_v6 src -j ACCEPTiptables -A INPUT -p tcp --dport 22 -m set --match-set cn_ip_v4 src -j ACCEPTip6tables -A INPUT -p tcp --dport 22 -m set --match-set cn_ip_v6 src -j ACCEPTiptables -A INPUT -p tcp --dport 22 -j DROPip6tables -A INPUT -p tcp --dport 22 -j DROP 规则持久化创建持久化脚本 /usr/local/sbin/firewall_persist： #!/bin/bash# 定义保存文件路径IPTABLES_SAVE_FILE=/etc/firewall_persist/iptables_rules.v4IP6TABLES_SAVE_FILE=/etc/firewall_persist/iptables_rules.v6IPSET_SAVE_FILE=/etc/firewall_persist/ipset.conf# 检查是否以root权限运行if [ $EUID -ne 0 ]; then echo 请以root权限运行此脚本 exit 1fi# 创建保存目录（如果不存在）mkdir -p /etc/firewall_persist# 函数：保存规则save_rules() echo 正在保存防火墙规则... # 保存iptables规则（IPv4） iptables-save $IPTABLES_SAVE_FILE if [ $? -eq 0 ]; then echo IPv4规则已保存到 $IPTABLES_SAVE_FILE else echo 保存IPv4规则失败 fi # 保存ip6tables规则（IPv6） ip6tables-save $IP6TABLES_SAVE_FILE if [ $? -eq 0 ]; then echo IPv6规则已保存到 $IP6TABLES_SAVE_FILE else echo 保存IPv6规则失败 fi # 保存ipset集合 ipset save $IPSET_SAVE_FILE if [ $? -eq 0 ]; then echo ipset规则已保存到 $IPSET_SAVE_FILE else echo 保存ipset规则失败 fi# 函数：加载规则load_rules() echo 正在加载防火墙规则... # 加载ipset集合 if [ -f $IPSET_SAVE_FILE ]; then ipset restore $IPSET_SAVE_FILE echo 已加载ipset规则 else echo ipset规则文件不存在 fi # 加载iptables规则（IPv4） if [ -f $IPTABLES_SAVE_FILE ]; then iptables-restore $IPTABLES_SAVE_FILE echo 已加载IPv4规则 else echo IPv4规则文件不存在 fi # 加载ip6tables规则（IPv6） if [ -f $IP6TABLES_SAVE_FILE ]; then ip6tables-restore $IP6TABLES_SAVE_FILE echo 已加载IPv6规则 else echo IPv6规则文件不存在 fi# 主逻辑case $1 in save) save_rules ;; load) load_rules ;; *) echo 用法: $0 save|load echo save - 保存当前iptables和ipset规则 echo load - 加载保存的iptables和ipset规则 exit 1 ;;esacexit 0 设置权限并保存当前规则： chmod +x /usr/local/sbin/firewall_persistfirewall_persist save 设置开机自启创建服务文件： nano /etc/systemd/system/firewall-restore.service 写入以下内容： [Unit]Description=Restore iptables and ipset rulesAfter=network.target[Service]Type=oneshotExecStart=/usr/local/sbin/firewall_persist loadRemainAfterExit=yes[Install]WantedBy=multi-user.target 启用服务： systemctl enable firewall-restore.service","tags":["Ubuntu","iptables","ipset","防火墙","GeoIP","网络安全","服务器配置","Linux"]},{"title":"Purpur 生电服务器搭建指南","path":"/post/purpur-technical-server-guide/","content":"总结于经历了卡顿和服务器崩溃后的经验 最重要的是，如果要开离线服务器，请务必使用登录认证插件，无论是否开启白名单。 本教程不安装面板，使用mcrcon控制。 购买云服务器配置参考： 服务器需求专用 - 中文 Minecraft Wiki 配置需求 玩家 CPU 内存 硬盘 上传带宽 下载带宽 备注 最低配置 1-3 Intel Pentium 4 2.0 GHz 或 AMD Athlon-Based CPUs 以上 512 MB 2 GB 可用空间 (5GB - 如果经常备份服务器) 3 Mbits 2 Mbits (Minecraft服务器能勉强在1Mbits的上传带宽上运行) 可接受配置 3-5 Intel Pentium 4 2.8 GHz 或 AMD Athlon XP 2600+ 以上 1 GB 8 GB 可用空间 6 Mbits 3 Mbits 推荐配置 5-8 Intel Core-Based CPUs 或 AMD K8-Based CPUs 以上 3 GB 16 GB 可用空间 8 Mbits 4 Mbits 优良配置 8-12 Intel Core-Based CPUs 或 AMD K8-Based CPUs at 3.0GHz 或更高 5 GB 25 GB 可用空间 14 Mbits 7 Mbits 最佳配置 12+ Intel Nehalem-Based CPUs 或 AMD K10-Based CPUs 以上 6 GB 35 GB 可用空间 30 Mbits 15 Mbits 推荐使用高速读写的机械磁盘或SLC SSD。 环境配置JDK：OpenJDK Runtime Environment Zulu21.40+17-CA (build 21.0.6+7-LTS) Minecraft：Purpur 1.20.1 开始安装重装系统云服务器自带的系统通常不纯净，会安装监控软件等。不仅占用资源，而且没人喜欢被监控，对吧？ 这里使用bin456789的dd脚本，重置为 Ubuntu 系统。当然，如果你熟悉其他系统，可以不选择 Ubuntu 系统。 这是一个示例脚本，root 密码会在每次刷新时随机生成，此时密码为：加载中… curl -O https://gitlab.com/bin456789/reinstall/-/raw/main/reinstall.sh || wget -O reinstall.sh $_sudo bash reinstall.sh ubuntu 24.04 --password AjYBL67d8pb5ZoKj 可以通过多种方式（SSH、HTTP 80 端口、后台 VNC、串行控制台）查看安装进度。即使安装过程出错，也能通过 SSH 运行 trans.sh alpine 安装到 Alpine。 等待安装完成。 安装JDKsudo apt updatesudo apt upgradesudo apt install gnupg ca-certificates curlcurl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpgecho deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main | sudo tee /etc/apt/sources.list.d/zulu.listsudo apt updatesudo apt install zulu21-jdk -y 检查 Java 版本以确保 Zulu Java 已正确安装。输出应显示已安装的 Zulu Java 版本，确认安装。 java -version 创建 Minecraft 用户出于安全原因， Minecraft 不应在 root 用户下运行。我们将创建一个新的系统用户和用户组，用户主目录为/opt/minecraft。这个用户将拥有最小权限来运行 Minecraft 服务器： sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft 我们不会为这个用户设置密码。这样，这个用户将无法通过 SSH 登录。要修改 minecraft 用户，你需要使用 root 登录服务器，或者其他有 sudo 权限的用户。 安装 Minecraft切换到minecraft用户： sudo su - minecraft 运行以下命令在用户主目录下创建三个新目录： mkdir -p ~/backups,tools,server backups目录将存储服务器备份。你可以将此目录同步到你的远程备份服务器。 tools目录将托管mcrcon客户端和备份脚本。 server目录将包含实际的 Minecraft 服务器及其数据。 下载 mcrcon以下是通过源码编译的方法，也可以从 Release 中下载。 安装编译mcrcon软件 sudo apt install git build-essential 下载mcrcon源码 git clone https://github.com/Tiiffi/mcrcon.git ~/tools/mcrcon --depth=1 编译mcrcon cd ~/tools/mcrconmake 检测是否可运行 ./mcrcon -v 输出应如下所示： mcrcon 0.7.2 (built: Jan 18 2025 14:05:51) - https://github.com/Tiiffi/mcrconBug reports: tiiffi+mcrcon at gmail https://github.com/Tiiffi/mcrcon/issues/ 下载 Minecraft 服务器wget https://api.purpurmc.org/v2/purpur/1.20.1/2062/download -P ~/server 或在本地电脑上下载完成后，通过 scp 或 sftp 传输到远程服务器，记得更改文件名和权限。 下载地址：https://purpurmc.org/download/purpur 更改权限： chown minecraft /opt/minecraft/server -Rchgrp minecraft /opt/minecraft/server -R 配置 Minecraft 服务器cd ~/serverjava -Xmx1024M -Xms1024M purpur.jar --nogui 第一次启动时，服务器会执行一些操作，创建server.properties和eula.txt文件，并停止。 要运行服务器，你需要同意Minecraft EULA。 echo eula=true eula.txt 接下来，打开server.properties文件，修改配置文件： nano ~/server/server.properties 修改以下配置，不要忘记将strong-password修改为更安全的密码，例如：加载中… 如果你不想从远程位置访问 Minecraft 服务器，确保 rcon 端口被防火墙阻塞。 rcon.port=25575rcon.password=strong-passwordenable-rcon=true 其他配置请参照服务端配置文件格式 - 中文 Minecraft Wiki，如修改难度为困难： difficulty=hard 启用白名单： enforce-whitelist=truewhite-list=true 关闭正版验证： online-mode=false 安装插件将插件jar文件复制到服务器文件的plugins文件夹下。 如果关闭了正版验证，AuthMe 必装，FastLogin 和 SkinsRestorer 选装，血的教训 下载地址： AuthMe FastLogin SkinsRestorer 通过 scp 或 sftp 传输到服务器后，不要忘记更改权限： chown minecraft /opt/minecraft/server -Rchgrp minecraft /opt/minecraft/server -R 访问 Minecraft 终端/opt/minecraft/tools/mcrcon/mcrcon -H 127.0.0.1 -P 25575 -p strong-password -t 定期备份nano /opt/minecraft/tools/backup.sh 粘贴以下配置： ##!/bin/bashfunction rcon /opt/minecraft/tools/mcrcon/mcrcon -H 127.0.0.1 -P 25575 -p strong-password $1rcon save-offrcon save-alltar -cvpzf /opt/minecraft/backups/server-$(date +%F-%H-%M).tar.gz /opt/minecraft/serverrcon save-on### 删除旧备份find /opt/minecraft/backups/ -type f -mtime +7 -name *.gz -delete 保存文件，并将脚本设置为可执行： chmod +x /opt/minecraft/tools/backup.sh 接下来，创建一个定时任务，每天在固定时间运行一次。 打开你的 crontab 文件，输入： crontab -e 每天 4:00 运行备份脚本，粘贴以下文本： 0 4 * * * /opt/minecraft/tools/backup.sh 创建 Systemd 单元文件sudo nano /etc/systemd/system/minecraft.service 粘贴以下配置： [Unit]Description=Minecraft ServerAfter=network.target[Service]User=minecraftNice=1KillMode=noneSuccessExitStatus=0 1ProtectHome=trueProtectSystem=fullPrivateDevices=trueNoNewPrivileges=trueWorkingDirectory=/opt/minecraft/serverExecStart=/usr/bin/java -Xmx1024M -Xms1024M -jar server.jar noguiExecStop=/opt/minecraft/tools/mcrcon/mcrcon -H 127.0.0.1 -P 25575 -p strong-password stop[Install]WantedBy=multi-user.target 根据你的服务器资源调整Xmx和Xms标志。Xmx标志定义 Java 虚拟机的最大内存，而Xms定义初始内存。确保使用正确的rcon端口和密码。 重新加载 systemd 管理配置： sudo systemctl daemon-reload 你还可以输入以下命令启动 Minecraft 服务器： sudo systemctl start minecraft 使用以下命令检查服务状态： sudo systemctl status minecraft 最后，设置 Minecraft 服务开机启动： sudo systemctl enable minecraft // 生成随机密码（16 位字母数字组合） function generateRandomPassword(length) { const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; let password = \"\"; for (let i = 0; i < length; i++) { password += chars.charAt(Math.floor(Math.random() * chars.length)); } return password; } // 等待 DOM 加载完成 document.addEventListener(\"DOMContentLoaded\", function() { // 生成两个独立的随机密码 let rootPassword = generateRandomPassword(16); // 用于 root 密码 let mcrconPassword = generateRandomPassword(16); // 用于 mcrcon 密码 // 更新顶部显示的 root 密码 const passwordDisplay = document.getElementById(\"random-password-display\"); if (passwordDisplay) { passwordDisplay.textContent = rootPassword; } // 更新顶部显示的 mcrcon 密码 const mcrconPasswordDisplay = document.getElementById(\"random-password-mcrcon-display\"); if (mcrconPasswordDisplay) { mcrconPasswordDisplay.textContent = mcrconPassword; } // 更新代码块中的 root 密码 const codeBlock = document.getElementById(\"code-display\").querySelector(\".code pre\"); if (codeBlock) { const lines = codeBlock.querySelectorAll(\"span.line\"); if (lines.length >= 2) { let secondLine = lines[1]; // 第二行（sudo bash ...） let originalHTML = secondLine.innerHTML; // 获取带高亮的 HTML let newHTML = originalHTML.replace(\"AjYBL67d8pb5ZoKj\", rootPassword); // 只替换密码 secondLine.innerHTML = newHTML; // 更新内容，保留高亮 } else { console.error(\"未找到足够的代码行，请检查结构\"); } } else { console.error(\"未找到代码块元素，请检查 DOM 结构\"); } });","tags":["Minecraft","Purpur","服务器","教程","技术"]},{"title":"使用Ventoy创建GPT格式的可启动Ubuntu 24 U盘","path":"/post/ventoy-gpt-ubuntu-24-guide/","content":"本教程将指导您如何使用 Ventoy 创建 GPT 格式的 Ubuntu 24 启动 U 盘，以便在支持 UEFI 启动的电脑上安装或体验 Ubuntu 24。 请注意： 本教程可能未涵盖所有细节，建议参考其他教程以获得更全面的指导。 创建步骤概览 下载 Ventoy 可执行文件、Ubuntu 安装镜像文件和虚拟机软件。 使用虚拟机软件将 Ubuntu 安装到 VHD 文件。 在 Ubuntu 系统中运行 vtoyboot 程序。 使用 Ventoy 创建可启动 U 盘。 复制 VHD 文件到 U 盘，并重命名为 vhd.vtoy。 进行微调以支持安全启动。 下载文件 Ventoy Ubuntu ISO VirtualBox 不保证其他虚拟机软件的可用性。 vtoyboot 安装 Ubuntu 打开 VirtualBox 并新建虚拟机。 创建固定大小的 VHD，建议大小为 8GB 以上，并保存在本地磁盘。 在系统选项卡中，勾选 EFI 以启用 UEFI 模式。 启动虚拟机，挂载 Ubuntu 安装镜像文件，然后安装 Ubuntu。 安装完成后，下载 vtoyboot，解压并运行： sudo bash vtoyboot.sh 脚本执行完毕后，使用 poweroff 命令关闭虚拟机。 创建可启动 U 盘运行 Ventoy 中的 Ventoy2Disk.exe。在配置选项菜单中，勾选安全启动支持，并将分区类型设置为GPT。 在分区设置中，可以选择勾选“在磁盘最后保留一段空间”，并根据需要调整分区大小和其他设置（可选）。如果不勾选此项，Ubuntu 系统可能无法访问 U 盘上的任何分区。 点击“安装”开始创建可启动 U 盘。 移动 VHD 文件将包含 Ubuntu 系统的 VHD 文件复制到 U 盘，并将其后缀名更改为 .vtoy。 微调设置运行 Ventoy 中的 VentoyPlugson.exe，在全局控制插件中启用 VTOY_LINUX_REMOUNT。 或者，直接在 Ventoy 分区/ventoy/ventoy.json 文件中添加以下内容： control:[ VTOY_LINUX_REMOUNT: 1 ] 此设置用于绕过安全启动检查。 Debian 相关Debian 同理，安装方法是一样的，但是可能无法进入图像界面，可以试试安装显卡驱动。","tags":["Ubuntu","Ventoy","GPT","U盘启动","UEFI","安全启动"]},{"title":"MuMu宏按键《明日方舟》0帧部署","path":"/post/mumu-macro-keys-arknights-0-frame-deployment/","content":"对MuMu官方脚本的”F键时停方案”进行了优化，主要修改了以下内容： 0帧部署 一键撤退 一键放技能 键位设置 功能介绍0帧部署 (R)在游戏暂停时，将鼠标悬停在待部署干员头像上，按下宏按键并移动到目标部署位置后松开。 操作流程： 一次宏按键 + 左键选定方向 0帧部署 一键放技能 (右键或F)在需要释放技能的干员位置，点击鼠标右键或按下F键。 一键放技能 0帧选取 (G)0帧选取 一键撤退 (S)一键撤退 其他功能： 子弹时间前进1帧： 选择干员后，按 D + 空格 返回暂停： D 干员撤退： W 干员技能： T 切换倍速： A 普通暂停： 空格 配置文件此为直接修改的配置文件，所有坐标均为相对坐标，理论上适用于所有分辨率。 下载 MuMu模拟器分享码分享《明日方舟》按键操作方案，复制此分享码：mumu7604380698，打开MuMu模拟器，在方案管理中导入使用！ 适用分辨率： 2560*1440 MuMu模拟器下载：https://mumu.163.com/ 0帧部署原理解释 editor_icon_scale: 1, icon: background_color: 00000066, description: 0帧部署, radius_correction: 1, rel_position: rel_x: 0.8962538819875777, rel_y: 0.1777593615715163 , visibility: true , key: device: keyboard, scan_code: 19, text: R, virtual_key: 82 , press_actions: [ click_rel:(0.940625, 0.07444444444444444), curve_last_point_sleep_time:until_release_cmd, curve_rel:mouse;(0.5, 2.0), keyboard_press:158, keyboard_release:158, mouse_press:1 ], rel_work_position: rel_x: 0.8962538819875777, rel_y: 0.1777593615715163 , release_actions: [ release_all, mouse_release:1 ], type: Macro 原理拆解： click_rel:(0.940625, 0.07444444444444444)：按下宏按键，解除暂停。 curve_last_point_sleep_time:until_release_cmd：设置滑动操作为显式调用 release 才松开。 curve_rel:mouse;(0.5, 2.0)：从鼠标位置（待部署干员位置）滑动至屏幕外，避免阻挡视线。 keyboard_press:158 + keyboard_release:158：模拟按下 ESC 键，暂停游戏。 mouse_press:1：拖动待部署干员。 release_all：松开 (0.5, 2.0) 位置的按动 (实测 curve_release 不起作用)。 mouse_release:1：松开鼠标左键，部署干员。","tags":["明日方舟","MuMu模拟器","宏按键"]},{"title":"使用 Azure 学生订阅创建免费支持 IPv4 和 IPv6 的 Azure 虚拟机","path":"/post/azure-VM-creation-guide/","content":"创建支持 IPv4 和 IPv6 的 Azure 虚拟机 前提条件拥有 Azure 学生订阅。 注意事项本文介绍的虚拟机并非免费，因为静态 IPv4 地址是收费的。收费项目为 Standard IPv4 Static Public IP 或 Basic IPv4 Static Public IP，费用为 $0.0036小时-$0.006小时。 如果想要免费使用，只能选择纯动态 IPv4 地址，或者纯 IPv6 地址（如果使用纯 IPv6，请务必从资源组中删除公网 IPv4 地址）。 或者参考使用负载均衡器开启动态 IPV4 和动态 IPv6 支持，在 2025 年 9 月之前应该仍然可用。 步骤概览 检查目标区域是否支持创建虚拟机。 创建支持 IPv4 和 IPv6 的虚拟网络。 创建虚拟机，并将其绑定到之前创建的虚拟网络。 为虚拟机所创建的网络接口启用 IPv6 支持。 分配公共 IPv4 和 IPv6 地址。 操作步骤检查区域是否支持创建虚拟机 进入 Azure 虚拟机创建页面。 首先选择操作系统。选择操作系统后，系统会显示更多可用数据中心。 查看是否有你偏好的区域。建议选择 Southeast Asia（新加坡）或 Japan East（日本东京，埼玉县）。不推荐 East Asia（香港），因为该区域的网络会绕行新加坡。Japan East 的部分 IP 地址也会先绕行新加坡。 配置可以选择 B2ats_v2。 点击查看 + 创建，确认所选区域支持你选择的配置。 如果支持创建，暂时不要创建虚拟机，先创建支持 IPv4 和 IPv6 的虚拟网络。否则，请重新选择区域或更改配置。 创建支持 IPv4 和 IPv6 的虚拟网络 进入虚拟网络创建页面。 在 IP 地址 选项卡中，添加 IPv6 地址空间。添加 IPv6 地址空间 创建虚拟网络。 进入创建好的虚拟网络的配置界面，选择“设置”-“子网”，编辑子网 “default”，勾选包括 IPv6 地址空间。勾选包括 IPv6 地址空间 创建虚拟机基本设置 首先选择订阅、资源组和操作系统。如果选择 Windows 操作系统，建议选择带有 [smalldisk] 前缀的系统。 如果要创建纯动态 IPv4 虚拟机，需要将可用性选项调整为无需基础结构冗余。 在“大小”选项中，可以选择 B1s、B2pts v2 和 B2ats v2 这三个选项，其他选项均不免费。 B2 系列的性能比 B1s 略高，其中 B2pts v2 为 ARM 架构。这里推荐选择 B2ats v2。 身份验证有两种方式：密钥文件和用户名密码。推荐选择 SSH 公钥。 创建虚拟机-基本 磁盘将 OS 磁盘大小 更改为 64GB(P6)，其他选项保持默认。 网络将 虚拟网络 更改为刚刚创建的虚拟网络。 创建虚拟机-网络 如果要创建纯动态 IPv4 虚拟机，新建公共 IP 时选择“动态 IPv4”，但这样将无法绑定 IPv6 地址。 创建虚拟机-网络-动态 IPV4 创建点击 查看 + 创建，核对各项配置是否正确。确认无误后点击“创建”。此时会开始部署虚拟机，并下载 SSH 密钥文件。等待一段时间后，会提示虚拟机部署完成。点击“转到资源”打开虚拟机资源页面。 调整网络接口配置在“设置”-“IP 配置”中，添加 IPv6 配置。 可以顺带添加公共 IPv6 地址。 调整网络接口配置 调整虚拟机配置连接虚拟机的方法可以参考网络上的相关文章。 默认内存只有 1GB，可以增大虚拟内存。对于 Linux 虚拟机来说问题不大，但 Windows 后台程序可能会经常崩溃。 对于 Windows 虚拟机，还需要在磁盘管理中将未分配的硬盘空间分配给 C 盘。","tags":["azure","IPv6","虚拟机"]},{"title":"光猫超级管理员密码获取","path":"/post/modem-password-cracking/","content":"本文介绍如何获取光猫的超级管理员密码。通过修改光猫管理页面的 onclick 属性，我们可以访问到存储在 /InternetGatewayDevice/DeviceInfo/X_CT-COM_TeleComAccount/value.conf 文件中的超级管理员账号和密码。 适用设备以下设备已在甘肃地区测试通过： 设备类型：XG-PON天翼网关(4口双频) 产品型号：HG5143D 软件版本号：V3.00.M5000SP1 操作步骤 将U盘插入光猫的USB接口。 打开光猫的管理页面，进入存储管理，点击识别到的U盘。 打开浏览器的开发者工具 (F12)，找到任意文件夹文字元素，将其 onclick 属性修改为 onclick=openfile(quot;../quot;, false)。修改onclick属性 点击修改后的文件夹，多次执行此操作，直到返回根目录。根目录 将位于 /InternetGatewayDevice/DeviceInfo/X_CT-COM_TeleComAccount/value.conf 的文件复制到U盘。该文件包含超级管理员的账号和密码。文件 可能还有其他方法，我第一次成功破解似乎是从某个XML文件中获取的账号密码","tags":["破解","光猫","超级管理员"]},{"title":"利用 BPB 面板漏洞获取免费 Trojan 节点","path":"/post/free-trojan/","content":"利用高于 2.5.3 版本的 BPB-Worker-Panel 面板漏洞，获取大量免费的 Trojan 节点。 1. 前言 本文主要介绍如何利用 BPB-Worker-Panel 面板的一个漏洞来获取免费的代理节点。这个漏洞其实早就被公开，但开发者似乎一直没有修复的打算。所以，大家一起来“欢乐”一下吧！请注意，在官方修复漏洞之前，不建议继续安装 BPB-Worker-Panel 面板！ 本文参考了批量获取免费的VPN节点，用不完真用不完….. BPB-Worker-Panel 面板BUG利用！！-零度博客。 2. 教程2.1. 准备工作 浏览器 Python 环境 requests 库 首先，安装 Python 的 requests 依赖库： pip install requests 2.2. 获取 BPB-Worker-Panel 面板网址 在浏览器中打开 https://i.nosec.org/login 并登录账号。 打开 https://fofa.info/result?qbase64=aWNvbl9oYXNoPSItMTM1NDAyNzMxOSIgJiYgYXNuPSIxMzMzNSIgJiYgcG9ydD0iNDQzIg%3D%3D，将搜索结果下载为 CSV 文件。 2.3. 验证 BPB-Worker-Panel 面板版本将下载的 CSV 文件重命名为 input.txt（或者直接在代码中修改文件名）。在同一目录下，新建一个 .py 文件，然后复制粘贴以下代码： from packaging import versionimport requests# 输入域名csv文件位置input_file = input.txt# 输出trojan结果文件位置output_file = trojan_urls.txt# cf优选域名domain = www.visa.com.sgdef append_login_to_urls(input_file, output_file): 将地址加上 /login 并保存到新文件 print(f正在处理 input_file，将地址加上 /login 并保存到 output_file...) with open(input_file, r, encoding=utf-8) as infile, open( output_file, w, encoding=utf-8 ) as outfile: for line in infile: # 检查是否以http开头，并在第一个逗号处分割 if line.lower().startswith(http): url = line.split(,)[0].strip() + /login outfile.write(url + ) print(f已完成地址追加，结果保存到 output_file)def extract_version(html): 从 HTML 内容中提取 BPB Panel 的版本号 if BPB Panel in html: start_index = html.find(BPB Panel) # 提取版本号（假设版本号以 2 开头） version_start = html.find(2, start_index) version_end = version_start while version_end len(html) and ( html[version_end].isdigit() or html[version_end] == . ): version_end += 1 return html[version_start:version_end] return Nonedef check_bpb_version(input_file, output_file): 访问地址并检查 BPB Panel 的版本号 print(f正在验证 input_file 中的地址...) headers = User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 min_version = version.parse(2.5.3) # 最低版本号 with open(input_file, r, encoding=utf-8) as infile, open( output_file, w, encoding=utf-8 ) as outfile: for line in infile: url = line.strip() try: response = requests.get(url, headers=headers, timeout=10) if response.status_code == 200 and BPB Panel in response.text: # 提取版本号 raw_version = extract_version(response.text) if raw_version: parsed_version = version.parse(raw_version) if parsed_version min_version: print(f[匹配] url (版本号: parsed_version)) outfile.write(url + ) except Exception as e: print(f[错误] 无法访问 url，错误：e) print(f验证完成，符合条件的地址保存到 output_file)def composite_trojan(input_file, output_file): 合成 Trojan 地址 # 删去https://及/login # 模板 trojan://bpb-trojan@www.visa.com.sg:443?security=tlssni=这里填域名fp=chromeallowlnsecure=1type=wshost=这里填域名path=%2Ftr%3Fed%3D2560#BPB with open(input_file, r, encoding=utf-8) as infile, open( output_file, w, encoding=utf-8 ) as outfile: for line in infile: url = line.strip() url = url[8:-6] trojan_url = ftrojan://bpb-trojan@domain:443?security=tlssni=urlfp=chromeallowlnsecure=1type=wshost=urlpath=%2Ftr%3Fed%3D2560#url outfile.write(trojan_url + )if __name__ == __main__: append_login_to_urls(input_file, bpb_urls.txt) check_bpb_version(bpb_urls.txt, bpb_urls_ok.txt) composite_trojan(bpb_urls_ok.txt, output_file) 2.4. 导入 Trojan 节点运行上述 Python 脚本后，在同目录下生成的 trojan_urls.txt 文件中包含了可用的 Trojan 节点信息。将这些节点信息导入你的 Trojan 客户端即可。","tags":["破解","Trojan","BPB","BPB 面板","BPB-Worker-Panel","漏洞"]},{"title":"绕过校园网认证","path":"/post/bypass-campus-network/","content":"本文仅供研究和测试，请勿将其用于任何收费或违法活动，后果自负。 原理在未进行校园网认证的情况下，通常不会屏蔽 DNS 查询（53 端口）。因此，可通过在 53 端口运行 Hysteria 2 或基于 UDP 的 mKCP 等来建立通信。 准备工作需要一台远程服务器，不建议使用国外服务器。 所需条件 未认证时不封锁 53 端口的校园网 一台远程服务器（Linux 或 Windows 均可，这里以 Linux 为例，建议使用国内服务器。） 支持 Hysteria 2 或其他底层传输协议为 UDP 协议的客户端，比如： Windows v2rayN nekoray Android v2rayNG NekoBox 验证 53 端口是否开放在未进行校园网认证时，打开命令提示符（CMD）并执行： nslookup www.baidu.com 223.5.5.5 如果返回的服务器字段显示为 unknown，则表示 53 端口可能被封锁，本方法可能不适用。 即使正确返回了 DNS 解析结果，也需要进一步验证外网的 53 端口是否开放，有可能校园网会劫持未认证用户的 DNS 请求。 可用示例： 53端口开放 不可用示例（内网 53 端口开放，但访问外网 53 端口被封锁）： 外网53端口封锁 内网53端口开放 （不可用配图为深圳大学校园网，使用 drcom 认证） 为什么建议使用国内服务器？UDP 协议本身具有明显的流量特征，且 mKCP 的加密方式容易被识别，可能导致服务器 IP 被封禁。 优点： 国内服务器的延迟更低，尤其是校园网环境。 可以使用国内的 app ，不会被反向墙封锁，但部分网购网站会封锁数据中心 IP。 国内服务器的流量特征更容易伪装成 DNS 流量。 如果使用国外服务器，可能会被GWF的深度包检测（DPI）识别并封锁。 实测教育网会对大量 UDP 流量封端口。（53端口未测试） 缺点： 国内服务器的流量更贵。 解决 systemd-resolved 占用 53 端口如果 53 端口被 systemd-resolved 占用，可以尝试以下方法解决： 方法一：使用 iptables 转发（推荐） 安装 iptables-persistent： sudo apt install iptables-persistent 安装过程中选择 YES 并回车。 添加 NAT 规则： 将目标端口为 53 的 UDP 数据包重定向到本地服务器的 5353 端口iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination :5353ip6tables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination :5353 保存 iptables 规则： netfilter-persistent save 将后续教程中的 53 端口改为 5353。 方法二：禁用 systemd-resolved 停止 systemd-resolved 服务： sudo systemctl stop systemd-resolved 编辑 /etc/systemd/resolved.conf 文件： sudo nano /etc/systemd/resolved.conf 修改内容如下： [Resolve]DNS=223.5.5.5DNSStubListener=no 创建符号链接： ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf 搭建教程协议介绍考虑到要伪装成跑在 53 端口的 DNS 流量，所以需要使用底层协议为 UDP 的代理协议。 常见基于 UDP 传输协议： Hysteria Hysteria 2 TUIC WireGuard KCP mKCP QUIC XHTTP 对比以下对比仅针对伪装成 53 端口 DNS 流量的情况。 协议 优点 缺点 客户端支持 共同特性 基于 UDP 传输适合绕过 TCP 封锁 UDP 流量可能被 QoS 限制在严格过滤环境中可能被识别封锁 - mKCP 可将流量伪装成 DNS 请求底层传输协议，可与其他协议配合 仅 v2ray 和 xray 支持仅 xray 支持流量伪装成 DNS 请求确认包重传机制消耗更多流量 Windows: v2rayN (7.10.3+)Android: v2rayNG (1.9.40+)，Neko-ray，Xray Hysteria 2 支持 0-RTT UDP 会话建立，减少延迟采用 Brutal 拥塞控制算法 xray 不支持将流量伪装为 HTTP3，无法伪装成 DNS 流量 几乎所有主流代理客户端 TUIC 支持 0-RTT UDP 会话建立轻量化设计，资源占用低基于 QUIC 协议 无法伪装成 DNS 流量对恶劣网络环境优化不足生态支持较新（2023年7月停更，2025年2月恢复更新） 支持 sing-box 和 tuic 核心的客户端 WireGuard 内置 TLS 1.3 加密多路复用减少连接开销对丢包和高延迟网络优化良好 无法伪装成 DNS 流量实现复杂 几乎所有主流代理客户端 XHTTP 支持上下行分离可伪装为 HTTP3 或 HTTP2支持多个 UDP 流量的聚合传输 无法伪装成 DNS 流量配置复杂仅 Xray 支持 Windows: v2rayNAndroid: v2rayNG 考虑到校园网不太可能搭载深度包检测，所以现阶段优先推荐 Hysteria 2，其次推荐 mKCP。 方法一：Hysteria 2Hysteria 2 文档 搭建 Hysteria 2 服务器远程服务器上安装 Hysteria 2参考官方文档： bash (curl -fsSL https://get.hy2.sh/) 如果服务器在国内，下载可能缓慢。可手动上传 Hysteria 可执行文件到服务器，然后执行： bash (curl -fsSL https://get.hy2.sh/) --local /path/to/hysteria-linux-amd64 安装完成后，设置开机自启： sudo systemctl enable hysteria-server.service 生成自签证书将伪装域名设置为 dns.alidns.com，可根据需要更改（需要 root 权限）： openssl req -x509 -nodes -newkey ec:(openssl ecparam -name prime256v1) -keyout /etc/hysteria/server.key -out /etc/hysteria/server.crt -subj /CN=dns.alidns.com -addext subjectAltName=DNS:dns.alidns.com -days 36500 chown hysteria /etc/hysteria/server.key chown hysteria /etc/hysteria/server.crt 编辑 config.yaml 并设置端口与密码sudo nano /etc/hysteria/config.yaml listen: :53tls: cert: /etc/hysteria/server.crt key: /etc/hysteria/server.keyauth: type: password password: 123456masquerade: type: proxy proxy: url: https://dns.alidns.com rewriteHost: true 启动 Hysteria 2sudo systemctl restart hysteria-server.service 检查 Hysteria 2 运行状态sudo systemctl status hysteria-server.service 出现 active (running) 即表示成功，否则检查端口占用、证书、防火墙等。还需在云服务器管理平台放行 53 端口。 连接到 Hysteria 2客户端中： 地址：服务器域名或 IP 端口：53 密码：设置的密码 传输层安全(TLS)：tls SNI：dns.alidns.com 跳过证书验证（建议配置自签证书的 pinSHA256 或 证书） 关闭分应用代理并切换到全局规则，建议搭配tun模式。 方法二：mKCP这里使用 Xray-core 举例，也可以使用 v2fly-v5 或 sing-box（不支持mKCP传输协议，可尝试quic） 等。 Xray-core 文档 使用 VMess + mKCP，此处仅作示例。 也可以使用： Vless + tls + mKCP Trojan + tls + mKCP 搭建 VLESS 服务器安装 Xray-core参考官方文档。 编辑配置文件默认路径为 usrlocaletcxrayconfig.json，可参考示例修改。 入站示例： listen: 0.0.0.0, port: 53, protocol: vmess, settings: clients: [ id: af525cf3-82a2-43c8-922a-b95eab605bc4 ] , streamSettings: network: kcp, kcpSettings: header: type: dns, domain: dns.alidns.com , sniffing: enabled: true, destOverride: [ http, tls, quic ] 启动 Xray-coresudo systemctl restart xray 检查 Xray-core 运行状态sudo systemctl status xray 同样需要放行 53 端口并检查防火墙。 连接到 Xray-corev2rayN V7.10.3及以后版本支持 dns 伪装。#6852v2rayNG V1.9.40及以后版本支持 dns 伪装。#4368 客户端中： 地址：服务器域名或 IP 端口：53 UUID：配置文件中的 uuid 加密方式、传输层安全：none 传输协议：kcp 伪装类型：dns 伪装域名：dns.alidns.com 关闭分应用代理并切换到全局规则，建议搭配tun模式。 使用方法如果相关配置正确，连接后即可在未认证的校园网环境中正常访问外网。","tags":["Hysteria 2","校园网","破解"]},{"title":"关于","path":"/about/index.html","content":"欢迎来到我的博客！ 我是四川大学的大二新生，也是一名热爱技术与分享的开发者，专注于软件开发和技术探索。 目前，我主要擅长 Qt C++ 开发，并计划深入学习 C#、Godot、Flutter。 这个博客是我用来记录学习过程、分享经验的平台。在这里，你可以找到与编程、项目实践和技术心得相关的内容。我希望通过分享自己的成长故事和解决问题的思路，与更多志同道合的朋友一起交流、进步。"}]